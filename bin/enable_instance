#! /usr/bin/ruby -i

begin 
  orig_stdout = $stdout.dup
  $stdout.reopen('/dev/null', 'w')

  system 'gem install aws-sdk --no-ri --no-rdoc' unless system('gem list | grep aws-sdk')
  system 'gem install net-ssh --no-ri --no-rdoc' unless system('gem list | grep net-ssh')
ensure
  $stdout.reopen(orig_stdout)
end

# Require Ruby standard libs first.
require 'rubygems'
require 'fcntl'
require 'optparse'
require 'yaml'

# Require all third party packages.
require 'aws-sdk'
require 'net/ssh'

options = {}
options[:env] = :test
options[:stdout] = true
options[:configuration] = {
  :aws => {
    :credentials_file => '/private/signifyd/aws/aws-credentials.yml',
    :elb => '',
    :ec2 => {
      :instances => []
    }
  }
}

# First check and see if keys exist
if File.exists?(options[:configuration][:aws][:credentials_file]) 
  credentials = YAML::load(File.open(options[:configuration][:aws][:credentials_file], 'r'))
  
  # Set environment variables, this basically exports this to the current
  # environment in the running shell.
  ENV['EC2_ACCESS_KEY'] = credentials['aws']['access_key_id']
  ENV['EC2_SECRET_KEY'] = credentials['aws']['secret_access_key']
  
  options[:configuration][:aws][:access_key_id]     = credentials['aws']['access_key_id']
  options[:configuration][:aws][:secret_access_key] = credentials['aws']['secret_access_key']
  
  # Configure AWS
  AWS.config(:access_key_id => options[:configuration][:aws][:access_key_id], :secret_access_key => options[:configuration][:aws][:secret_access_key])
else
  puts "--------------------------------------------------------------------"
  puts "\033[22;31mCould not find a valid credential file at #{options[:configuration][:aws][:credentials_file]}\033[37m"
  puts "--------------------------------------------------------------------"
  exit 1
end

if $stdin.tty?
  ARGV.each do |line|
  end
else
  $stdin.each_line do |line|
    if line.strip =~ /^i-([a-zA-Z0-9]{8})$/ 
      options[:configuration][:aws][:ec2][:instances] << line.strip
    end
  end
end

OptionParser.new do |parser|
  parser.banner = "USAGE: boot_base_instance [options]"
  parser.separator ""
  parser.separator "Specific options:"

  parser.on("-e", "--env ENVIRONMENT", "\033[32mRequired\033[37m. Pass the environment you would like to boot there server in.") do |setting|
    default_envs = [:test, :staging, :production]
    environment  = setting.strip.downcase.to_sym

    if !default_envs.include?(environment) 
      puts "You typed '\033[22;31m#{setting}\033[37m' for the environment, must be one of the following:"
      puts "  [#{default_envs.join(', ')}]"
      exit
    else
      options[:env] = setting
    end
  end
  
  parser.on("-i", "--instances ARRAY", Array, "\033[32mRequired\033[37m. Pass a list of the instances you want added to the load balancer") do |setting|
    if setting.empty?
      puts "You passed an invalid list of AWS instances, please try again."
      exit
    else
      setting.collect { |instance| 
        next if options[:configuration][:aws][:ec2][:instances].include?(instance)
        options[:configuration][:aws][:ec2][:instances] << instance
      }
    end
  end

  parser.on("-l", "--loadbalancer LOAD_BALANCER", "\033[32mRequired\033[37m. Pass the load balancer the nodes will be added to.") do |setting|
    options[:configuration][:aws][:elb] = setting
  end
  
  parser.on("-s", "--sync-output BOOLEAN", "Syncs stdout with console so wait progress is enabled. Default enabled.") do |setting|
    options[:stdout] = setting
  end

  parser.on_tail("-h", "--help", "--usage", "Show this usage message and quit.") do |setting|
    puts parser.help
    exit
  end
end.parse!(ARGV)

puts options.inspect