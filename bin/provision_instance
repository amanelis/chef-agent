#! /usr/bin/ruby -i

# Author: Alex Manelis <manelis@signifyd.com>
# Synopsis: This script is ment to boot instances on AWS and configure them
#   using the Chef scripts that are part of this package. This script has
#   one optional argument. Pass a -n flag to specify how many nodes you want
#   to boot up and run chef on under the Signifyd AWS account. This script will
#   always default to using the "base" Chef script for its just configuring a 
#   base image. If the -n switch is left blank, the script will assume "1" 
#   instance to be started.
#
# Usage:
# 
# Given the following command, it will boot 2 instances and return their
# Amazon AWS EC2 instance ids.
#
#   $ bin/boot_instance -n 2

# Require main lib dependency, it will handle the rest
require './bin/lib/enumerable'
require './bin/lib/pipeline'

# Start by checking that there is always the two rubygem dependencies installed.
Pipeline::Utility::Dependencies.install_main_dependencies!

# Require Ruby standard libs first.
Pipeline::Utility::Dependencies.require_stdlibs

# Require all third party packages.
Pipeline::Utility::Dependencies.require_third_party

# Options hash will contain all preset data for doing a valid deploy. Reference here for
# environment variables and any variable used throughout the provision/deployment.
options = {}

# If you want to supress/sync STDOUT
options[:stdout] = true

# Test mode will turn off real AWS interaction on certain work that needs to be done.
options[:test_mode] = false

# Main configuration for the nodes is specified here. 
options[:configuration] = {
  :aws => {
    :access_key_id => nil,
    :secret_access_key => nil,
    :credentials_file => '/private/signifyd/aws/credentials.yml',
    :ec2 => {
      :default_sleep_second => 300,
      :instance_count => 1,
      :zones => ['us-east-1a', 'us-east-1d'],
      :instance => {
        :image_id => 'ami-6fa0f706',
        :key_name => 'platform',
        :security_groups => ['www'],
        :instance_type => 'm1.small',
        :availability_zone => ''
      },
      :instances => []
    }
  }
}

# Build number
current_build_number = nil

# Sync standard out
$stdout.sync = options[:stdout]

# First check and see if keys exist
if File.exists?(options[:configuration][:aws][:credentials_file]) 
  credentials = YAML::load(File.open(options[:configuration][:aws][:credentials_file], 'r'))
  
  # Set environment variables, this basically exports this to the current
  # environment in the running shell.
  ENV['EC2_ACCESS_KEY'] = credentials['aws']['access_key_id']
  ENV['EC2_SECRET_KEY'] = credentials['aws']['secret_access_key']
  
  options[:configuration][:aws][:access_key_id]     = credentials['aws']['access_key_id']
  options[:configuration][:aws][:secret_access_key] = credentials['aws']['secret_access_key']
  
  # Configure AWS
  AWS.config(:access_key_id => options[:configuration][:aws][:access_key_id], :secret_access_key => options[:configuration][:aws][:secret_access_key])
else
  abort "\033[22;31mCould not find a valid credential file at #{options[:configuration][:aws][:credentials_file]}\033[0m"
end

# Capture STDIN here and parse out if STDIN contains node information. This block of code 
# is important, if we decided to pipe( | ) data into this script, we will need to configure
# and store it from here.
unless $stdin.tty?
  $stdin.each_line do |line|
    # Save any STDIN input that contains or looks like an AWS instance ID => i-12345678
    if line.strip =~ /^i-([a-zA-Z0-9]{8})$/ 
      options[:configuration][:aws][:ec2][:instances] << line.strip 
    end
  end
  
  # Be sure all instances added are uniq
  options[:configuration][:aws][:ec2][:instances] = options[:configuration][:aws][:ec2][:instances].uniq
end

# Build a few objets we will need in OptionParser and throughout the script.
ec2 = AWS::EC2.new
elb = AWS::ELB.new
as3 = AWS::S3.new

# Get all load balancers and EC2 instances under account.
load_balancers = elb.load_balancers
ec2_instances  = ec2.instances

OptionParser.new do |parser|
  parser.banner = "USAGE: deploy_instance [options]"
  parser.separator ""
  parser.separator "Specific options:"
  
  parser.on("-l", "--loadbalancer LOAD_BALANCER", "\033[35mOptional\033[0m. Pass the load balancer (AWS NAME) the nodes will be added to.") do |setting|
    if setting.nil?
      puts "You passed in invalid argument for switch: -l | --loadbalancer, please try again."
      exit 1
    else
      if load_balancers.collect(&:name).include?(setting.strip)
        options[:configuration][:aws][:elb] = load_balancers[setting.strip]
      else
        puts "Your argument (\033[35m#{setting}\033[0m) for -l | --loadbalancer was not found under the AWS account connected, please try again."
        exit 1
      end
    end
  end
  
  parser.on("-b", "--buildnumber INTEGER", "Pass in the current $BUILD_NUMBER.") do |setting|
    begin
      setting = Integer(setting)
    rescue ArgumentError => e
      puts "--------------------------------------------------------------------"
      puts "\033[22;31mInvalid input, please give an integer only for -b/--buildnumber switch.\033[0m"
      puts "--------------------------------------------------------------------"
      exit 1
    end
    current_build_number = setting
  end
  
  parser.on("-n", "--nodes INTEGER", "Pass the number of servers to boot up and run Chef on.") do |setting|
    begin
      setting = Integer(setting)
    rescue ArgumentError => e
      puts "--------------------------------------------------------------------"
      puts "\033[22;31mInvalid input, please give an integer only for -n/--nodes switch.\033[0m"
      puts "--------------------------------------------------------------------"
      exit 1
    end
    options[:configuration][:aws][:ec2][:instance_count] = setting
  end
end.parse!(ARGV)

# Must pass a valid ELB
if options[:configuration][:aws][:elb].nil?
  abort "No valid '\033[22;31m-l/--loadbalancer'. You must pass in 1 valid load balancer.\033[0m"
end

# Must pass a valid $BUILD_NUMBER
if current_build_number.nil?
  abort "No valid '\033[22;31m-b/--buildnumber'. You must pass an integer value.\033[0m"
end

# Iterate for x times to create number of instances
puts "Booting #{options[:configuration][:aws][:ec2][:instance_count]} AWS instance(s)..."
options[:configuration][:aws][:ec2][:instance_count].times.collect { |ndx| 
  # This will swap between zones used on each iteration through the count.
  options[:configuration][:aws][:ec2][:instance][:availability_zone] = options[:configuration][:aws][:ec2][:zones][ndx % 2]

  begin
    AWS.memoize do
      options[:configuration][:aws][:ec2][:instances] << ec2.instances.create(options[:configuration][:aws][:ec2][:instance])
    end
  rescue => e
    puts "ERROR BOOTING INSTANCES: #{e}"
    break
  end
}

# Add tags to all newly created instances
options[:configuration][:aws][:ec2][:instances].collect { |instance| 
  # Tag the instances to the current env
  AWS.memoize do
    instance.add_tag('Name', :value => "CONFIGURING-#{options[:configuration][:aws][:elb].name}-#{current_build_number}")
  end
}