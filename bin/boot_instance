#! /usr/bin/ruby -i

# Author: Alex Manelis <manelis@signifyd.com>
# Synopsis: This script is ment to boot instances on AWS and configure them
#   using the Chef scripts that are part of this package. This script has
#   one optional argument. Pass a -n flag to specify how many nodes you want
#   to boot up and run chef on under the Signifyd AWS account. This script will
#   always default to using the "base" Chef script for its just configuring a 
#   base image. If the -n switch is left blank, the script will assume "1" 
#   instance to be started.
#
# Usage:
# 
# Given the following command, it will boot 2 instances and return their
# Amazon AWS EC2 instance ids.
#
#   $ bin/boot_instance -n 2

begin 
  orig_stdout = $stdout.dup
  $stdout.reopen('/dev/null', 'w')

  system 'gem install aws-sdk --no-ri --no-rdoc'        unless system('gem list | grep aws-sdk')
  system 'gem install net-ssh --no-ri --no-rdoc'        unless system('gem list | grep net-ssh')
  system 'gem install net-ssh-multi --no-ri --no-rdoc'  unless system('gem list | grep net-ssh-multi')
ensure
  $stdout.reopen(orig_stdout)
end

module Enumerable
  def in_parallel
    map{ |x| Thread.new { yield(x) } }.each{ |t| t.join }
  end
end

# Require Ruby standard libs first.
require 'rubygems'
require 'fcntl'
require 'optparse'
require 'thread'
require 'yaml'

# Require all third party packages.
require 'aws-sdk'
require 'net/ssh'
require 'net/ssh/multi'

options = {}
options[:stdout] = true
options[:test_mode] = false
options[:configuration] = {
  :aws => {
    :credentials_file => '/private/signifyd/aws/aws-credentials.yml',
    :ec2 => {
      :default_sleep_second => 240,
      :instance_count => 1,
      :instance => {
        :image_id => 'ami-971758fe',
        :key_name => 'platform',
        :security_groups => ['www'],
        :availability_zone => 'us-east-1a'
      }
    }
  }
}

# First check and see if keys exist
if File.exists?(options[:configuration][:aws][:credentials_file]) 
  credentials = YAML::load(File.open(options[:configuration][:aws][:credentials_file], 'r'))
  
  # Set environment variables, this basically exports this to the current
  # environment in the running shell.
  ENV['EC2_ACCESS_KEY'] = credentials['aws']['access_key_id']
  ENV['EC2_SECRET_KEY'] = credentials['aws']['secret_access_key']
  
  options[:configuration][:aws][:access_key_id]     = credentials['aws']['access_key_id']
  options[:configuration][:aws][:secret_access_key] = credentials['aws']['secret_access_key']
  
  # Configure AWS
  AWS.config(:access_key_id => options[:configuration][:aws][:access_key_id], :secret_access_key => options[:configuration][:aws][:secret_access_key])
else
  puts "--------------------------------------------------------------------"
  puts "\033[22;31mCould not find a valid credential file at #{options[:configuration][:aws][:credentials_file]}\033[37m"
  puts "--------------------------------------------------------------------"
  exit 1
end

OptionParser.new do |parser|
  parser.banner = "USAGE: boot_base_instance [options]"
  parser.separator ""
  parser.separator "Specific options:"

  parser.on("-n", "--number-of-nodes INTEGER", "Pass the number of servers to boot up and run Chef on.") do |setting|
    begin
      setting = Integer(setting)
    rescue ArgumentError => e
      puts "--------------------------------------------------------------------"
      puts "\033[22;31mInvalid input, please give an integer only.#{options[:configuration][:aws][:credentials_file]}\033[37m"
      puts "--------------------------------------------------------------------"
      exit 1
    end
    
    options[:configuration][:aws][:ec2][:instance_count] = setting
  end
  
  parser.on("-s", "--sync-output BOOLEAN", "Syncs stdout with console so wait progress is enabled. Default enabled.") do |setting|
    options[:stdout] = setting
  end

  parser.on_tail("-h", "--help", "--usage", "Show this usage message and quit.") do |setting|
    puts parser.help
    exit
  end
end.parse!(ARGV)

# Sync standard out
$stdout.sync = options[:stdout]

# Create a few instances to communicate with AWS
EC2 = AWS::EC2.new
S3  = AWS::S3.new

# Save all instances created
instances = []

# Iterate for x times to create number of instances
puts "Booting #{options[:configuration][:aws][:ec2][:instance_count]} AWS instance(s)..."
options[:configuration][:aws][:ec2][:instance_count].times.collect { |ndx| 
  instance = EC2.instances.create(options[:configuration][:aws][:ec2][:instance])
  instances << instance
}

# Sleep and wait for currently booting images to be ready
sleep 2 while instances.any? { |i| i.status == :pending if i.respond_to?(:status) }
puts "Sleeping #{options[:configuration][:aws][:ec2][:default_sleep_second]/60} minutes to wait for instance to fully boot and respond to ssh..."
sleep options[:configuration][:aws][:ec2][:default_sleep_second]

# Run through instances and start SSH
puts "Running Chef on all instances created..."
instances.in_parallel{ |instance| 
  puts "SSH into #{instance.dns_name}"
  Net::SSH.start(instance.dns_name, 'ec2-user') do |session|
    puts " => running Chef on #{instance.id}"
    session.open_channel do |ch|
      ch.request_pty
      ch.exec 'sudo sh -c "cd /root; curl -L https://raw.github.com/amanelis/chef-agent/play/install_amzn1.sh | bash -s base"'
    end 
  end
}

puts instances.collect { |i| i.id }